# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Flask application

on:
  push:
    branches: [ "staging" ]
  pull_request:
    branches: [ "staging" ]
  release:
    types: [ "created" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test
      run: |
        python -m unittest discover -s tests
    - name: Deploy to staging
      if: github.ref == 'refs/heads/staging'
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here, e.g., SSH into server and pull latest changes
        # ssh user@your-server "cd /path/to/your/app && git pull && systemctl restart your-app"
        echo "Deployment complete."
    - name: Deploy to Production
      if: github.event_name == 'release' && github.event.release.tag_name != ''
      run: |
        echo "Deploying to production environment for tag ${{ github.event.release.tag_name }}..."
        # ssh user@your-server "cd /path/to/your/app && git fetch --tags && git checkout ${{ github.event.release.tag_name }} && systemctl restart your-app"
        echo "Production deployment complete."
